public class file : stream
{
	private const long BUFFER_SIZE = 128;
	
	private object _handle;
	private byte[] _buffer;
	private long _length = 0;
	private long _pos = 0;
	
	public this(string path, bool write, bool read)
	{
		_handle = __fnative_fopen__(path, write, read);
		_buffer = new byte[BUFFER_SIZE];
	}
	
	public this(string path)
	{
		_ctor_(path, false, true);
	}
	
	public get long length { return _length; }
	public get long position { return _pos; }
	public set long position { return _pos = value; }
	
	public long read(byte[] buffer, long offset, long length)
	{
		long r = math.min(length, _length - _pos);
		array.copy(_buffer, _pos, buffer, offset, r);
		_pos += r;
		return r;
	}
	public bool write(byte[] buffer, long offset, long length) 
	{
		expand(length);
		array.copy(buffer, offset, _buffer, _pos, length);
		_pos += length;
		_length += length;
		return true;
	}
	public bool write(byte b) 
	{
		expand(1);
		_buffer[_pos++] = b;
		_length++;
		return true;
	}
}